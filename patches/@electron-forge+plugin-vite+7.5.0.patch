diff --git a/node_modules/@electron-forge/plugin-vite/dist/ViteConfig.js b/node_modules/@electron-forge/plugin-vite/dist/ViteConfig.js
index 2b9052e..ee09350 100644
--- a/node_modules/@electron-forge/plugin-vite/dist/ViteConfig.js
+++ b/node_modules/@electron-forge/plugin-vite/dist/ViteConfig.js
@@ -28,14 +28,14 @@ class ViteConfigGenerator {
             forgeConfigSelf: buildConfig,
         };
         // `configEnv` is to be passed as an arguments when the user export a function in `vite.config.js`.
-        const userConfig = (await (0, vite_1.loadConfigFromFile)(configEnv, buildConfig.config))?.config ?? {};
+        const userConfig = (await (0, vite_1.loadConfigFromFile)(configEnv, buildConfig.config))?.config;
         switch (target) {
             case 'main':
-                return (0, vite_1.mergeConfig)((0, vite_main_config_1.getConfig)(configEnv), userConfig);
+                return ((0, vite_main_config_1.getConfig)(configEnv), userConfig);
             case 'preload':
-                return (0, vite_1.mergeConfig)((0, vite_preload_config_1.getConfig)(configEnv), userConfig);
+                return ((0, vite_preload_config_1.getConfig)(configEnv), userConfig);
             case 'renderer':
-                return (0, vite_1.mergeConfig)((0, vite_renderer_config_1.getConfig)(configEnv), userConfig);
+                return ((0, vite_renderer_config_1.getConfig)(configEnv), userConfig);
             default:
                 throw new Error(`Unknown target: ${target}, expected 'main', 'preload' or 'renderer'`);
         }
diff --git a/node_modules/@electron-forge/plugin-vite/dist/config/vite.main.config.js b/node_modules/@electron-forge/plugin-vite/dist/config/vite.main.config.js
index 3776045..ab5ab5d 100644
--- a/node_modules/@electron-forge/plugin-vite/dist/config/vite.main.config.js
+++ b/node_modules/@electron-forge/plugin-vite/dist/config/vite.main.config.js
@@ -3,16 +3,11 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.getConfig = void 0;
 const vite_1 = require("vite");
 const vite_base_config_1 = require("./vite.base.config");
-function getConfig(forgeEnv) {
+function getConfig(forgeEnv, userConfig = {}) {
     const { forgeConfigSelf } = forgeEnv;
     const define = (0, vite_base_config_1.getBuildDefine)(forgeEnv);
     const config = {
         build: {
-            lib: {
-                entry: forgeConfigSelf.entry,
-                fileName: () => '[name].js',
-                formats: ['cjs'],
-            },
             rollupOptions: {
                 external: vite_base_config_1.external,
             },
@@ -25,7 +20,15 @@ function getConfig(forgeEnv) {
             mainFields: ['module', 'jsnext:main', 'jsnext'],
         },
     };
-    return (0, vite_1.mergeConfig)((0, vite_base_config_1.getBuildConfig)(forgeEnv), config);
+    const buildConfig = (0, vite_base_config_1.getBuildConfig)(forgeEnv)
+    if(userConfig.build?.lib == null) {
+        config.build.lib = {
+                entry: forgeConfigSelf.entry,
+                fileName: () => '[name].js',
+                formats: ['cjs'],
+            };
+    }
+    return (0, vite_1.mergeConfig)((0, vite_1.mergeConfig)(buildConfig, config), userConfig);
 }
 exports.getConfig = getConfig;
 //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidml0ZS5tYWluLmNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25maWcvdml0ZS5tYWluLmNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQkFBb0U7QUFFcEUseURBQWdHO0FBRWhHLFNBQWdCLFNBQVMsQ0FBQyxRQUE0QjtJQUNwRCxNQUFNLEVBQUUsZUFBZSxFQUFFLEdBQUcsUUFBUSxDQUFDO0lBQ3JDLE1BQU0sTUFBTSxHQUFHLElBQUEsaUNBQWMsRUFBQyxRQUFRLENBQUMsQ0FBQztJQUN4QyxNQUFNLE1BQU0sR0FBZTtRQUN6QixLQUFLLEVBQUU7WUFDTCxHQUFHLEVBQUU7Z0JBQ0gsS0FBSyxFQUFFLGVBQWUsQ0FBQyxLQUFLO2dCQUM1QixRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsV0FBVztnQkFDM0IsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDO2FBQ2pCO1lBQ0QsYUFBYSxFQUFFO2dCQUNiLFFBQVEsRUFBUiwyQkFBUTthQUNUO1NBQ0Y7UUFDRCxPQUFPLEVBQUUsQ0FBQyxJQUFBLG1DQUFnQixFQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3RDLE1BQU07UUFDTixPQUFPLEVBQUU7WUFDUCwwQkFBMEI7WUFDMUIsVUFBVSxFQUFFLENBQUMsTUFBTSxDQUFDO1lBQ3BCLFVBQVUsRUFBRSxDQUFDLFFBQVEsRUFBRSxhQUFhLEVBQUUsUUFBUSxDQUFDO1NBQ2hEO0tBQ0YsQ0FBQztJQUVGLE9BQU8sSUFBQSxrQkFBVyxFQUFDLElBQUEsaUNBQWMsRUFBQyxRQUFRLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN2RCxDQUFDO0FBeEJELDhCQXdCQyJ9
\ No newline at end of file
diff --git a/node_modules/@electron-forge/plugin-vite/dist/config/vite.preload.config.js b/node_modules/@electron-forge/plugin-vite/dist/config/vite.preload.config.js
index 20a3fe6..af852d8 100644
--- a/node_modules/@electron-forge/plugin-vite/dist/config/vite.preload.config.js
+++ b/node_modules/@electron-forge/plugin-vite/dist/config/vite.preload.config.js
@@ -3,7 +3,7 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.getConfig = void 0;
 const vite_1 = require("vite");
 const vite_base_config_1 = require("./vite.base.config");
-function getConfig(forgeEnv) {
+function getConfig(forgeEnv, userConfig = {}) {
     const { forgeConfigSelf } = forgeEnv;
     const config = {
         build: {
@@ -23,7 +23,8 @@ function getConfig(forgeEnv) {
         },
         plugins: [(0, vite_base_config_1.pluginHotRestart)('reload')],
     };
-    return (0, vite_1.mergeConfig)((0, vite_base_config_1.getBuildConfig)(forgeEnv), config);
+    const buildConfig = (0, vite_base_config_1.getBuildConfig)(forgeEnv)
+    return (0, vite_1.mergeConfig)((0, vite_1.mergeConfig)(buildConfig, config), userConfig);
 }
 exports.getConfig = getConfig;
 //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidml0ZS5wcmVsb2FkLmNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25maWcvdml0ZS5wcmVsb2FkLmNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQkFBb0U7QUFFcEUseURBQWdGO0FBRWhGLFNBQWdCLFNBQVMsQ0FBQyxRQUE0QjtJQUNwRCxNQUFNLEVBQUUsZUFBZSxFQUFFLEdBQUcsUUFBUSxDQUFDO0lBQ3JDLE1BQU0sTUFBTSxHQUFlO1FBQ3pCLEtBQUssRUFBRTtZQUNMLGFBQWEsRUFBRTtnQkFDYixRQUFRLEVBQVIsMkJBQVE7Z0JBQ1IsNEdBQTRHO2dCQUM1RyxLQUFLLEVBQUUsZUFBZSxDQUFDLEtBQUs7Z0JBQzVCLE1BQU0sRUFBRTtvQkFDTixNQUFNLEVBQUUsS0FBSztvQkFDYixpQ0FBaUM7b0JBQ2pDLG9CQUFvQixFQUFFLElBQUk7b0JBQzFCLGNBQWMsRUFBRSxXQUFXO29CQUMzQixjQUFjLEVBQUUsV0FBVztvQkFDM0IsY0FBYyxFQUFFLGNBQWM7aUJBQy9CO2FBQ0Y7U0FDRjtRQUNELE9BQU8sRUFBRSxDQUFDLElBQUEsbUNBQWdCLEVBQUMsUUFBUSxDQUFDLENBQUM7S0FDdEMsQ0FBQztJQUVGLE9BQU8sSUFBQSxrQkFBVyxFQUFDLElBQUEsaUNBQWMsRUFBQyxRQUFRLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN2RCxDQUFDO0FBdEJELDhCQXNCQyJ9
\ No newline at end of file
diff --git a/node_modules/@electron-forge/plugin-vite/dist/config/vite.renderer.config.js b/node_modules/@electron-forge/plugin-vite/dist/config/vite.renderer.config.js
index 25d144e..fd47cb0 100644
--- a/node_modules/@electron-forge/plugin-vite/dist/config/vite.renderer.config.js
+++ b/node_modules/@electron-forge/plugin-vite/dist/config/vite.renderer.config.js
@@ -1,12 +1,13 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.getConfig = void 0;
+const vite_1 = require("vite");
 const vite_base_config_1 = require("./vite.base.config");
 // https://vitejs.dev/config
-function getConfig(forgeEnv) {
+function getConfig(forgeEnv, userConfig = {}) {
     const { root, mode, forgeConfigSelf } = forgeEnv;
     const name = forgeConfigSelf.name ?? '';
-    return {
+    const config = {
         root,
         mode,
         base: './',
@@ -19,6 +20,7 @@ function getConfig(forgeEnv) {
         },
         clearScreen: false,
     };
+    return (0, vite_1.mergeConfig)(config, userConfig);
 }
 exports.getConfig = getConfig;
 //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidml0ZS5yZW5kZXJlci5jb25maWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlnL3ZpdGUucmVuZGVyZXIuY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLHlEQUEwRDtBQUUxRCw0QkFBNEI7QUFDNUIsU0FBZ0IsU0FBUyxDQUFDLFFBQStCO0lBQ3ZELE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRSxHQUFHLFFBQVEsQ0FBQztJQUNqRCxNQUFNLElBQUksR0FBRyxlQUFlLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUV4QyxPQUFPO1FBQ0wsSUFBSTtRQUNKLElBQUk7UUFDSixJQUFJLEVBQUUsSUFBSTtRQUNWLEtBQUssRUFBRTtZQUNMLE1BQU0sRUFBRSxrQkFBa0IsSUFBSSxFQUFFO1NBQ2pDO1FBQ0QsT0FBTyxFQUFFLENBQUMsSUFBQSx1Q0FBb0IsRUFBQyxJQUFJLENBQUMsQ0FBQztRQUNyQyxPQUFPLEVBQUU7WUFDUCxnQkFBZ0IsRUFBRSxJQUFJO1NBQ3ZCO1FBQ0QsV0FBVyxFQUFFLEtBQUs7S0FDTCxDQUFDO0FBQ2xCLENBQUM7QUFqQkQsOEJBaUJDIn0=
\ No newline at end of file
diff --git a/node_modules/@electron-forge/plugin-vite/src/ViteConfig.ts b/node_modules/@electron-forge/plugin-vite/src/ViteConfig.ts
index ea0077f..b22584b 100644
--- a/node_modules/@electron-forge/plugin-vite/src/ViteConfig.ts
+++ b/node_modules/@electron-forge/plugin-vite/src/ViteConfig.ts
@@ -1,5 +1,5 @@
 import debug from 'debug';
-import { loadConfigFromFile, mergeConfig } from 'vite';
+import { loadConfigFromFile } from 'vite';
 
 import { getConfig as getMainViteConfig } from './config/vite.main.config';
 import { getConfig as getPreloadViteConfig } from './config/vite.preload.config';
@@ -31,14 +31,14 @@ export default class ViteConfigGenerator {
     };
 
     // `configEnv` is to be passed as an arguments when the user export a function in `vite.config.js`.
-    const userConfig = (await loadConfigFromFile(configEnv, buildConfig.config))?.config ?? {};
+    const userConfig = (await loadConfigFromFile(configEnv, buildConfig.config))?.config;
     switch (target) {
       case 'main':
-        return mergeConfig(getMainViteConfig(configEnv as ConfigEnv<'build'>), userConfig);
+        return getMainViteConfig(configEnv as ConfigEnv<'build'>), userConfig;
       case 'preload':
-        return mergeConfig(getPreloadViteConfig(configEnv as ConfigEnv<'build'>), userConfig);
+        return getPreloadViteConfig(configEnv as ConfigEnv<'build'>), userConfig;
       case 'renderer':
-        return mergeConfig(getRendererViteConfig(configEnv as ConfigEnv<'renderer'>), userConfig);
+        return getRendererViteConfig(configEnv as ConfigEnv<'renderer'>), userConfig;
       default:
         throw new Error(`Unknown target: ${target}, expected 'main', 'preload' or 'renderer'`);
     }
diff --git a/node_modules/@electron-forge/plugin-vite/src/config/vite.main.config.ts b/node_modules/@electron-forge/plugin-vite/src/config/vite.main.config.ts
index 137e6ac..5f59390 100644
--- a/node_modules/@electron-forge/plugin-vite/src/config/vite.main.config.ts
+++ b/node_modules/@electron-forge/plugin-vite/src/config/vite.main.config.ts
@@ -2,16 +2,11 @@ import { type ConfigEnv, mergeConfig, type UserConfig } from 'vite';
 
 import { external, getBuildConfig, getBuildDefine, pluginHotRestart } from './vite.base.config';
 
-export function getConfig(forgeEnv: ConfigEnv<'build'>): UserConfig {
+export function getConfig(forgeEnv: ConfigEnv<'build'>, userConfig: UserConfig = {}): UserConfig {
   const { forgeConfigSelf } = forgeEnv;
   const define = getBuildDefine(forgeEnv);
   const config: UserConfig = {
     build: {
-      lib: {
-        entry: forgeConfigSelf.entry,
-        fileName: () => '[name].js',
-        formats: ['cjs'],
-      },
       rollupOptions: {
         external,
       },
@@ -24,6 +19,15 @@ export function getConfig(forgeEnv: ConfigEnv<'build'>): UserConfig {
       mainFields: ['module', 'jsnext:main', 'jsnext'],
     },
   };
+  const buildConfig = getBuildConfig(forgeEnv);
+
+  if (userConfig.build?.lib == null) {
+    config.build!.lib = {
+      entry: forgeConfigSelf.entry,
+      fileName: () => '[name].js',
+      formats: ['cjs'],
+    };
+  }
 
-  return mergeConfig(getBuildConfig(forgeEnv), config);
+  return mergeConfig(mergeConfig(buildConfig, config), userConfig);
 }
diff --git a/node_modules/@electron-forge/plugin-vite/src/config/vite.preload.config.ts b/node_modules/@electron-forge/plugin-vite/src/config/vite.preload.config.ts
index 03e128d..3f4f06f 100644
--- a/node_modules/@electron-forge/plugin-vite/src/config/vite.preload.config.ts
+++ b/node_modules/@electron-forge/plugin-vite/src/config/vite.preload.config.ts
@@ -2,7 +2,7 @@ import { type ConfigEnv, mergeConfig, type UserConfig } from 'vite';
 
 import { external, getBuildConfig, pluginHotRestart } from './vite.base.config';
 
-export function getConfig(forgeEnv: ConfigEnv<'build'>): UserConfig {
+export function getConfig(forgeEnv: ConfigEnv<'build'>, userConfig: UserConfig = {}): UserConfig {
   const { forgeConfigSelf } = forgeEnv;
   const config: UserConfig = {
     build: {
@@ -22,6 +22,7 @@ export function getConfig(forgeEnv: ConfigEnv<'build'>): UserConfig {
     },
     plugins: [pluginHotRestart('reload')],
   };
+  const buildConfig = getBuildConfig(forgeEnv);
 
-  return mergeConfig(getBuildConfig(forgeEnv), config);
+  return mergeConfig(mergeConfig(buildConfig, config), userConfig);
 }
diff --git a/node_modules/@electron-forge/plugin-vite/src/config/vite.renderer.config.ts b/node_modules/@electron-forge/plugin-vite/src/config/vite.renderer.config.ts
index a5262d8..889c9b7 100644
--- a/node_modules/@electron-forge/plugin-vite/src/config/vite.renderer.config.ts
+++ b/node_modules/@electron-forge/plugin-vite/src/config/vite.renderer.config.ts
@@ -1,13 +1,13 @@
-import { type ConfigEnv, type UserConfig } from 'vite';
+import { type ConfigEnv, mergeConfig, type UserConfig } from 'vite';
 
 import { pluginExposeRenderer } from './vite.base.config';
 
 // https://vitejs.dev/config
-export function getConfig(forgeEnv: ConfigEnv<'renderer'>) {
+export function getConfig(forgeEnv: ConfigEnv<'renderer'>, userConfig: UserConfig = {}) {
   const { root, mode, forgeConfigSelf } = forgeEnv;
   const name = forgeConfigSelf.name ?? '';
 
-  return {
+  const config: UserConfig = {
     root,
     mode,
     base: './',
@@ -20,4 +20,6 @@ export function getConfig(forgeEnv: ConfigEnv<'renderer'>) {
     },
     clearScreen: false,
   } as UserConfig;
+  
+  return mergeConfig(config, userConfig);
 }
